import os
import tensorflow_probability as tfp
from tensorflow_probability import edward2 as ed
import numpy as np
import tensorflow as tf
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
tf.logging.set_verbosity(tf.logging.FATAL)

data = dict()
$(data)

$(model)


log_joint = ed.make_log_joint_fn(model)


def target_log_prob_fn($(params_list)):
    return log_joint($(data_str), $(params))


hmc_kernel = tfp.mcmc.HamiltonianMonteCarlo(
    target_log_prob_fn=target_log_prob_fn,
    step_size=0.1,
    num_leapfrog_steps=10)


states, kernel_results = tfp.mcmc.sample_chain(
    num_results=10000,
    current_state=[$(init)],
    kernel=hmc_kernel,
    num_burnin_steps=1000,
    parallel_iterations=5)


with tf.Session() as sess:
    states_, results_ = sess.run([states, kernel_results])

for i in range(len(states_)):
    print(np.mean(states_[i], axis=0))
    print(np.std(states_[i], axis=0))
